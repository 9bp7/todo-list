!function(e){var t={};function a(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,a),r.l=!0,r.exports}a.m=e,a.c=t,a.d=function(e,t,n){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(a.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)a.d(n,r,function(t){return e[t]}.bind(null,r));return n},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="",a(a.s=0)}([function(e,t,a){"use strict";a.r(t);const n=(e,t,a,n,r,i)=>({setTitle:t=>e=t,setDescription:e=>t=e,setDueDate:e=>a=e,setPriority:e=>n=e,setNotes:e=>r=e,setChecklist:e=>i=e,getTitle:()=>e,getDescription:()=>t,getDueDate:()=>a,getPriority:()=>n,getNotes:()=>r,getChecklist:()=>i}),r=(e,t=!1)=>{let a=[];return{addTask:e=>a.push(e),getTask:e=>a[e],getTasks:()=>a,getTitle:()=>e,isFavourite:()=>t}},i=(()=>{let e=[];return{addProject:t=>e.push(t),getAllProjects:()=>e,getProject:t=>e[t]}})(),l=(e,t)=>{let a=document.createElement("div");a.classList.add("modal"),a.dataset.modalid=t,a.innerHTML+=`<h3>${e}</h3>`,document.querySelector("body").appendChild(a);const n=()=>{a.classList.remove("show")},r=()=>{a.querySelector("#modal-close").addEventListener("click",()=>{n()})};a.innerHTML+='<h3 id="modal-close">✕</h3>',r();return{show:(e=[])=>{((e=[])=>{for(let t=0;t<e;t++)e[t].hide(),console.log(e[t])})(e),a.classList.add("show"),r()},hide:n,focusFirstElement:()=>{a.querySelector("input").focus()}}},o=(e=>{const t=l("New Task",0);let a=document.querySelector('div[data-modalid="0"]');a.innerHTML+="<form></form>";let n=!1;const r=()=>{a.querySelector("form").innerHTML='<input type="text" id="newtask-name" name="newtask-name" placeholder="Task Name (e.g. eat cereals)" tabindex="0">\n      <input type="text" id="newtask-desc"name="newtask-desc" placeholder="Description">\n      <label for="newtask-addDueDateCheck" class="inlineblock">Add due date?</label>\n      <input type="checkbox" data-check="duedate" id="newtask-dueDateCheck" name="newtask-addDueDateCheck">\n      <input type="date" data-check="duedate" id="newtask-dueDate" class="hide" name="newtask-dueDate">\n      \n      <fieldset class="modal-priority">\n        <p class="inlineblock">Priority:</p>\n        <label for="newtask-lowPriority" class="inlineblock">Low</label>\n        <input type="radio" id="newtask-lowPriority" name="newtask-priority" checked>\n        <label for="newtask-medPriority" class="inlineblock">Medium</label>\n        <input type="radio" id="newtask-medPriority" name="newtask-priority">\n        <label for="newtask-highPriority" class="inlineblock">High</label>\n        <input type="radio" id="newtask-highPriority" name="newtask-priority">\n      </fieldset>\n      \n      <textarea id="newtask-notes" name="newtask-notes"\n                rows="3" placeholder="Add additional notes here"></textarea>\n      \n      <label for="newtask-addChecklistCheck"  class="inlineblock">Add checklist?</label>\n      <input type="checkbox" data-check="checklist" id="newtask-checklistCheck" name="newtask-addChecklistCheck">\n      <input type="text" data-check="checklist" id="newtask-checklist" class="hide" name="newtask-checklist">\n\n      <input type="submit" value="Add Task"></input>'},i=()=>a.querySelector("form");return r(),Object.assign({},t,{show:()=>{t.show(),t.focusFirstElement()},resetForm:r,getForm:i,getValue:e=>i().querySelector(`input[id="${e}"`).value,getAllValues:()=>{let e=i(),t={};return e.querySelectorAll("input").forEach(e=>{"checkbox"===e.getAttribute("type")||"radio"===e.getAttribute("type")?t[e.getAttribute("id")]=e.checked:t[e.getAttribute("id")]=e.value}),t},trackCheckBox:e=>{let t=i().querySelectorAll(`input[data-check="${e}"]`),a=null,n=[];t.forEach(e=>{"checkbox"===e.getAttribute("type")?a=e:n.push(e)}),a.addEventListener("CheckboxStateChange",()=>{n.forEach(e=>{a.checked?e.classList.remove("hide"):e.classList.add("hide")})})},trackSubmit:e=>{if(!n){let t=i();t.addEventListener("submit",e=>{e.preventDefault()}),t.addEventListener("submit",e),n=!0}},addErrorLabel:(e,t)=>{let a=i();if(a.querySelector(`p[data-error="${e}"]`));else{let n=a.querySelector("#"+e),r=document.createElement("p");r.classList.add("modal-error"),r.dataset.error=e,r.textContent=t,console.log("element pos: "+n),a.insertBefore(r,n.nextSibling)}}})})(),c=(e=>{const t=l("Edit Task",1);let a=document.querySelector('div[data-modalid="1"]');a.innerHTML+="<form></form>";let n=!1;const r=()=>{a.querySelector("form").innerHTML='<input type="text" id="newtask-name" name="newtask-name" placeholder="Task Name (e.g. eat cereals)" tabindex="0">\n      <input type="text" id="newtask-desc"name="newtask-desc" placeholder="Description">\n      <label for="newtask-addDueDateCheck" class="inlineblock">Add due date?</label>\n      <input type="checkbox" data-check="duedate" id="newtask-dueDateCheck" name="newtask-addDueDateCheck">\n      <input type="date" data-check="duedate" id="newtask-dueDate" class="hide" name="newtask-dueDate">\n      \n      <fieldset class="modal-priority">\n        <p class="inlineblock">Priority:</p>\n        <label for="newtask-lowPriority" class="inlineblock">Low</label>\n        <input type="radio" id="newtask-lowPriority" name="newtask-priority" checked>\n        <label for="newtask-medPriority" class="inlineblock">Medium</label>\n        <input type="radio" id="newtask-medPriority" name="newtask-priority">\n        <label for="newtask-highPriority" class="inlineblock">High</label>\n        <input type="radio" id="newtask-highPriority" name="newtask-priority">\n      </fieldset>\n      \n      <textarea id="newtask-notes" name="newtask-notes"\n                rows="3" placeholder="Add additional notes here"></textarea>\n      \n      <label for="newtask-addChecklistCheck"  class="inlineblock">Add checklist?</label>\n      <input type="checkbox" data-check="checklist" id="newtask-checklistCheck" name="newtask-addChecklistCheck">\n      <input type="text" data-check="checklist" id="newtask-checklist" class="hide" name="newtask-checklist">\n\n      <input type="submit" value="Edit Task"></input>'},i=()=>a.querySelector("form");return r(),Object.assign({},t,{show:()=>{t.show(),t.focusFirstElement()},resetForm:r,getForm:i,populateForm:e=>{let t=i();for(const[a,n]of Object.entries(e)){let e=t.querySelector("#"+a);e&&("checkbox"===e.getAttribute("type")||"radio"===e.getAttribute("type")?(n&&e.click(),e.checked=n):e.value=void 0===n?"":n),console.log(e)}},getValue:e=>i().querySelector(`input[id="${e}"`).value,getAllValues:()=>{let e=i(),t={};return e.querySelectorAll("input").forEach(e=>{"checkbox"===e.getAttribute("type")||"radio"===e.getAttribute("type")?t[e.getAttribute("id")]=e.checked:t[e.getAttribute("id")]=e.value}),e.querySelectorAll("textarea").forEach(e=>{t[e.getAttribute("id")]=e.value}),t},trackCheckBox:e=>{let t=i().querySelectorAll(`input[data-check="${e}"]`),a=null,n=[];t.forEach(e=>{"checkbox"===e.getAttribute("type")?a=e:n.push(e)}),a.addEventListener("CheckboxStateChange",()=>{n.forEach(e=>{a.checked?e.classList.remove("hide"):(e.classList.add("hide"),e.value="")})})},trackSubmit:e=>{if(!n){let t=i();t.addEventListener("submit",e=>{e.preventDefault()}),t.addEventListener("submit",e),n=!0}},addErrorLabel:(e,t)=>{let a=i();if(a.querySelector(`p[data-error="${e}"]`));else{let n=a.querySelector("#"+e),r=document.createElement("p");r.classList.add("modal-error"),r.dataset.error=e,r.textContent=t,console.log("element pos: "+n),a.insertBefore(r,n.nextSibling)}}})})(),s=(()=>{let e=document.querySelectorAll("button"),t=document.querySelector(".sidebar-favourites"),a=document.querySelector(".sidebar-projects"),l=document.querySelector(".display-inner"),s=0,d=0;const u=()=>{e=document.querySelectorAll("button"),e.forEach(e=>{"new-task"===e.dataset.btn&&e.addEventListener("click",()=>{d=+e.dataset.projectid,o.resetForm(),o.show([c,void 0]),o.trackCheckBox("duedate"),o.trackCheckBox("checklist"),o.trackSubmit(()=>{(()=>{let e=o.getAllValues(),t=!1;if(""===e["newtask-name"]&&(o.addErrorLabel("newtask-name","You need to enter a name!"),t=!0),!t){let t="";t=e["newtask-lowPriority"]?"low":e["newtask-medPriority"]?"med":"high";let a=n(e["newtask-name"],e["newtask-desc"],e["newtask-dueDate"],t,e["newtask-notes"],e["newtask-checklist"]);i.getProject(d).addTask(a),p(s),o.hide()}})()})})})},k=()=>{t.innerHTML="",a.innerHTML="";let e=0;i.getAllProjects().forEach(n=>{n.isFavourite()?t.innerHTML+=e===s?`<li class="project-link selected" data-id="${e}"> ${n.getTitle()}</li>`:`<li class="project-link" data-id="${e}"> ${n.getTitle()}</li>`:a.innerHTML+=e===s?`<li class="project-link selected" data-id="${e}"> ${n.getTitle()}</li>`:`<li class="project-link" data-id="${e}"> ${n.getTitle()}</li>`,e++}),document.querySelectorAll(".project-link").forEach(e=>{console.log(e),e.addEventListener("click",()=>{let t=e.dataset.id;p(t)})})},p=e=>{s=+e;let t=i.getProject(e);l.innerHTML=`<h3>${t.getTitle()} <button class="add-btn" data-btn="new-task" data-projectID="${e}">＋ Add Task</button></h3>`,l.innerHTML+="<ul>";let a=0;t.getTasks().forEach(t=>{let n=document.createElement("li");n.dataset.pos=a,n.dataset.projectid=e;let r=t.getPriority();n.innerHTML+=`<input type="checkbox"> <span class="todo-pri-${r}">${t.getTitle()}</span>`,""!==t.getDescription()&&(n.innerHTML+=`<p class="todo-desc">${t.getDescription()}</p>`),""!==t.getDueDate()&&null!==t.getDueDate()&&(n.innerHTML+=`<p class="todo-desc">Due ${t.getDueDate()}</p>`),l.appendChild(n),a++}),l.innerHTML+="</ul>",k(),u(),l.querySelectorAll("li").forEach(e=>{})};return{trackNewProjectButtons:()=>{e.forEach(e=>{"new-project"===e.dataset.btn&&e.addEventListener("click",()=>{let e="";do{e=prompt("Name of project: ")}while(""===e||null===e);let t=r(e);i.addProject(t),k()})})},updateSideBar:k,displayProject:p}})();let d=r("Inbox",!0);i.addProject(d);let u=n("Test","More info about the test",null,null,null,null);d.addTask(u),s.displayProject(0),d=r("Personal"),i.addProject(d),d=r("Work"),i.addProject(d),s.updateSideBar(),s.trackNewProjectButtons()}]);